!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:youren::LogLevel::Level
ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:youren::LogLevel::Level
FATAL	log.h	/^        FATAL = 5$/;"	e	enum:youren::LogLevel::Level
FileAppender	log.cpp	/^FileAppender::FileAppender(const std::string& filename)$/;"	f	class:FileAppender	signature:(const std::string& filename)
FileAppender	log.h	/^    FileAppender(const std::string& filename);$/;"	p	class:youren::FileAppender	access:public	signature:(const std::string& filename)
FileAppender	log.h	/^class FileAppender : public LogAppender {$/;"	c	namespace:youren	inherits:LogAppender
FileAppender::FileAppender	log.cpp	/^FileAppender::FileAppender(const std::string& filename)$/;"	f	class:FileAppender	signature:(const std::string& filename)
FileAppender::log	log.cpp	/^void FileAppender::log(LogLevel::Level, LogEvent::ptr event)$/;"	f	class:FileAppender	signature:(LogLevel::Level, LogEvent::ptr event)
FileAppender::reopen	log.cpp	/^bool FileAppender::reopen()$/;"	f	class:FileAppender	signature:()
FormatItem	log.h	/^    class FormatItem{$/;"	c	class:youren::LogFormatter	access:private
INFO	log.h	/^        INFO  = 2,$/;"	e	enum:youren::LogLevel::Level
Level	log.h	/^    enum Level {$/;"	g	class:youren::LogLevel	access:private
LogAppender	log.h	/^    LogAppender() {}$/;"	f	class:youren::LogAppender	access:private	signature:()
LogAppender	log.h	/^class LogAppender{$/;"	c	namespace:youren
LogEvent	log.h	/^    LogEvent() {}$/;"	f	class:youren::LogEvent	access:public	signature:()
LogEvent	log.h	/^class LogEvent$/;"	c	namespace:youren
LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:youren::LogFormatter	access:public	signature:(const std::string& pattern)
LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:youren
LogLevel	log.h	/^class LogLevel{$/;"	c	namespace:youren
Logger	log.cpp	/^Logger::Logger(const string& name)$/;"	f	class:Logger	signature:(const string& name)
Logger	log.h	/^    Logger() {}$/;"	f	class:youren::Logger	access:public	signature:()
Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:youren::Logger	access:public	signature:(const std::string& name = ”)
Logger	log.h	/^class Logger {$/;"	c	namespace:youren
Logger::Logger	log.cpp	/^Logger::Logger(const string& name)$/;"	f	class:Logger	signature:(const string& name)
Logger::addAppender	log.cpp	/^void Logger::addAppender(LogAppender::ptr appender)$/;"	f	class:Logger	signature:(LogAppender::ptr appender)
Logger::debug	log.cpp	/^void Logger::debug(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
Logger::delAppender	log.cpp	/^void Logger::delAppender(LogAppender::ptr appender)$/;"	f	class:Logger	signature:(LogAppender::ptr appender)
Logger::error	log.cpp	/^void Logger::error(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
Logger::fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
Logger::info	log.cpp	/^void Logger::info(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
Logger::log	log.cpp	/^void Logger::log(Loglevel::Level level, LogEvent::ptr event)$/;"	f	class:Logger	signature:(Loglevel::Level level, LogEvent::ptr event)
Logger::warn	log.cpp	/^void Logger::warn(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
StdoutAppender	log.h	/^class StdoutAppender : public LogAppender{$/;"	c	namespace:youren	inherits:LogAppender
StdoutAppender::log	log.cpp	/^void StdoutAppender::log(LogLevel::Level, LogEvent::ptr event)$/;"	f	class:StdoutAppender	signature:(LogLevel::Level, LogEvent::ptr event)
WARN	log.h	/^        WARN  = 3,$/;"	e	enum:youren::LogLevel::Level
addAppender	log.cpp	/^void Logger::addAppender(LogAppender::ptr appender)$/;"	f	class:Logger	signature:(LogAppender::ptr appender)
addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:youren::Logger	access:public	signature:(LogAppender::ptr appender)
debug	log.cpp	/^void Logger::debug(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
delAppender	log.cpp	/^void Logger::delAppender(LogAppender::ptr appender)$/;"	f	class:Logger	signature:(LogAppender::ptr appender)
delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:youren::Logger	access:public	signature:(LogAppender::ptr appender)
error	log.cpp	/^void Logger::error(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
format	log.h	/^        virtual void format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:youren::LogFormatter::FormatItem	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    std::ostream format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:youren::LogFormatter	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:youren::LogFormatter	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
getFormatter	log.h	/^    LogFormatter::ptr getFormatter(){ return m_formatter; }$/;"	f	class:youren::LogAppender	access:private	signature:()
getLogLevel	log.h	/^    LogLevel::Level getLogLevel() const { return m_level; }$/;"	f	class:youren::Logger	access:public	signature:() const
info	log.cpp	/^void Logger::info(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
log	log.cpp	/^void FileAppender::log(LogLevel::Level, LogEvent::ptr event)$/;"	f	class:FileAppender	signature:(LogLevel::Level, LogEvent::ptr event)
log	log.cpp	/^void Logger::log(Loglevel::Level level, LogEvent::ptr event)$/;"	f	class:Logger	signature:(Loglevel::Level level, LogEvent::ptr event)
log	log.cpp	/^void StdoutAppender::log(LogLevel::Level, LogEvent::ptr event)$/;"	f	class:StdoutAppender	signature:(LogLevel::Level, LogEvent::ptr event)
log	log.h	/^    virtual void log(LogLevel::Level, LogEvent::ptr event) = 0;$/;"	p	class:youren::LogAppender	access:private	signature:(LogLevel::Level, LogEvent::ptr event)
log	log.h	/^    void log(Loglevel::Level level, LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(Loglevel::Level level, LogEvent::ptr event)
m_appenders	log.h	/^    std::list<LogAppender> m_appenders; \/\/AppenderÈõÜÂêà$/;"	m	class:youren::Logger	access:private
m_content	log.h	/^    std::string m_content;        \/\/Êó•ÂøóÂÜÖÂÆπ$/;"	m	class:youren::LogEvent	access:private
m_filestream	log.h	/^    std::ostream m_filestream;$/;"	m	class:youren::FileAppender	access:private
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:youren::LogAppender	access:private
m_items	log.h	/^    std::vector<FormatItem> m_items;$/;"	m	class:youren::LogFormatter	access:private
m_level	log.h	/^    LogLevel::Level m_level;            \/\/Êó•ÂøóÁ∫ßÂà´$/;"	m	class:youren::Logger	access:private
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:youren::LogAppender	access:private
m_name	log.h	/^    std::string m_name;                 \/\/Êó•ÂøóÂêçÁß∞$/;"	m	class:youren::Logger	access:private
m_name	log.h	/^    std::string m_name;$/;"	m	class:youren::FileAppender	access:private
m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:youren::LogFormatter	access:private
m_time	log.h	/^    uint64_t m_time = 0;          \/\/Êó∂Èó¥Êà≥$/;"	m	class:youren::LogEvent	access:private
override	log.h	/^    void log(LogLevel::Level, LogEvent::ptr event) override;$/;"	m	class:youren::FileAppender	access:public
override	log.h	/^    void log(LogLevel::Level, LogEvent::ptr event) override;$/;"	m	class:youren::StdoutAppender	access:public
ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:youren::LogFormatter::FormatItem	access:public
ptr	log.h	/^    typedef std::shared_ptr<FileAppender> ptr;$/;"	t	class:youren::FileAppender	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:youren::LogAppender	access:private
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:youren::LogEvent	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:youren::LogFormatter	access:public
ptr	log.h	/^    typedef std::shared_ptr<StdoutAppender> ptr;$/;"	t	class:youren::StdoutAppender	access:public
reopen	log.cpp	/^bool FileAppender::reopen()$/;"	f	class:FileAppender	signature:()
reopen	log.h	/^    bool reopen();$/;"	p	class:youren::FileAppender	access:public	signature:()
setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr formatter){ m_formatter = formatter; }$/;"	f	class:youren::LogAppender	access:private	signature:(LogFormatter::ptr formatter)
setLogLevel	log.h	/^    void setLogLevel(LogLevel::Level val) { m_level = val; }$/;"	f	class:youren::Logger	access:public	signature:(LogLevel::Level val)
warn	log.cpp	/^void Logger::warn(LogEvent::ptr event)$/;"	f	class:Logger	signature:(LogEvent::ptr event)
warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
youren	log.h	/^namespace youren{$/;"	n
youren::FileAppender	log.h	/^class FileAppender : public LogAppender {$/;"	c	namespace:youren	inherits:LogAppender
youren::FileAppender::FileAppender	log.h	/^    FileAppender(const std::string& filename);$/;"	p	class:youren::FileAppender	access:public	signature:(const std::string& filename)
youren::FileAppender::m_filestream	log.h	/^    std::ostream m_filestream;$/;"	m	class:youren::FileAppender	access:private
youren::FileAppender::m_name	log.h	/^    std::string m_name;$/;"	m	class:youren::FileAppender	access:private
youren::FileAppender::override	log.h	/^    void log(LogLevel::Level, LogEvent::ptr event) override;$/;"	m	class:youren::FileAppender	access:public
youren::FileAppender::ptr	log.h	/^    typedef std::shared_ptr<FileAppender> ptr;$/;"	t	class:youren::FileAppender	access:public
youren::FileAppender::reopen	log.h	/^    bool reopen();$/;"	p	class:youren::FileAppender	access:public	signature:()
youren::LogAppender	log.h	/^class LogAppender{$/;"	c	namespace:youren
youren::LogAppender::LogAppender	log.h	/^    LogAppender() {}$/;"	f	class:youren::LogAppender	access:private	signature:()
youren::LogAppender::getFormatter	log.h	/^    LogFormatter::ptr getFormatter(){ return m_formatter; }$/;"	f	class:youren::LogAppender	access:private	signature:()
youren::LogAppender::log	log.h	/^    virtual void log(LogLevel::Level, LogEvent::ptr event) = 0;$/;"	p	class:youren::LogAppender	access:private	signature:(LogLevel::Level, LogEvent::ptr event)
youren::LogAppender::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:youren::LogAppender	access:private
youren::LogAppender::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:youren::LogAppender	access:private
youren::LogAppender::ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:youren::LogAppender	access:private
youren::LogAppender::setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr formatter){ m_formatter = formatter; }$/;"	f	class:youren::LogAppender	access:private	signature:(LogFormatter::ptr formatter)
youren::LogAppender::~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:youren::LogAppender	access:private	signature:()
youren::LogEvent	log.h	/^class LogEvent$/;"	c	namespace:youren
youren::LogEvent::LogEvent	log.h	/^    LogEvent() {}$/;"	f	class:youren::LogEvent	access:public	signature:()
youren::LogEvent::m_content	log.h	/^    std::string m_content;        \/\/Êó•ÂøóÂÜÖÂÆπ$/;"	m	class:youren::LogEvent	access:private
youren::LogEvent::m_time	log.h	/^    uint64_t m_time = 0;          \/\/Êó∂Èó¥Êà≥$/;"	m	class:youren::LogEvent	access:private
youren::LogEvent::ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:youren::LogEvent	access:public
youren::LogEvent::~LogEvent	log.h	/^    ~LogEvent() {}$/;"	f	class:youren::LogEvent	access:public	signature:()
youren::LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:youren
youren::LogFormatter::FormatItem	log.h	/^    class FormatItem{$/;"	c	class:youren::LogFormatter	access:private
youren::LogFormatter::FormatItem::format	log.h	/^        virtual void format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:youren::LogFormatter::FormatItem	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
youren::LogFormatter::FormatItem::ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:youren::LogFormatter::FormatItem	access:public
youren::LogFormatter::FormatItem::~FormatItem	log.h	/^        virtual ~FormatItem(){  }$/;"	f	class:youren::LogFormatter::FormatItem	access:public	signature:()
youren::LogFormatter::LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:youren::LogFormatter	access:public	signature:(const std::string& pattern)
youren::LogFormatter::format	log.h	/^    std::ostream format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:youren::LogFormatter	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
youren::LogFormatter::format	log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:youren::LogFormatter	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
youren::LogFormatter::m_items	log.h	/^    std::vector<FormatItem> m_items;$/;"	m	class:youren::LogFormatter	access:private
youren::LogFormatter::m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:youren::LogFormatter	access:private
youren::LogFormatter::ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:youren::LogFormatter	access:public
youren::LogFormatter::~LogFormatter	log.h	/^    ~LogFormatter() {}$/;"	f	class:youren::LogFormatter	access:public	signature:()
youren::LogLevel	log.h	/^class LogLevel{$/;"	c	namespace:youren
youren::LogLevel::DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:youren::LogLevel::Level
youren::LogLevel::ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:youren::LogLevel::Level
youren::LogLevel::FATAL	log.h	/^        FATAL = 5$/;"	e	enum:youren::LogLevel::Level
youren::LogLevel::INFO	log.h	/^        INFO  = 2,$/;"	e	enum:youren::LogLevel::Level
youren::LogLevel::Level	log.h	/^    enum Level {$/;"	g	class:youren::LogLevel	access:private
youren::LogLevel::WARN	log.h	/^        WARN  = 3,$/;"	e	enum:youren::LogLevel::Level
youren::Logger	log.h	/^class Logger {$/;"	c	namespace:youren
youren::Logger::Logger	log.h	/^    Logger() {}$/;"	f	class:youren::Logger	access:public	signature:()
youren::Logger::Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:youren::Logger	access:public	signature:(const std::string& name = ”)
youren::Logger::addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:youren::Logger	access:public	signature:(LogAppender::ptr appender)
youren::Logger::debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
youren::Logger::delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:youren::Logger	access:public	signature:(LogAppender::ptr appender)
youren::Logger::error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
youren::Logger::fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
youren::Logger::getLogLevel	log.h	/^    LogLevel::Level getLogLevel() const { return m_level; }$/;"	f	class:youren::Logger	access:public	signature:() const
youren::Logger::info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
youren::Logger::log	log.h	/^    void log(Loglevel::Level level, LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(Loglevel::Level level, LogEvent::ptr event)
youren::Logger::m_appenders	log.h	/^    std::list<LogAppender> m_appenders; \/\/AppenderÈõÜÂêà$/;"	m	class:youren::Logger	access:private
youren::Logger::m_level	log.h	/^    LogLevel::Level m_level;            \/\/Êó•ÂøóÁ∫ßÂà´$/;"	m	class:youren::Logger	access:private
youren::Logger::m_name	log.h	/^    std::string m_name;                 \/\/Êó•ÂøóÂêçÁß∞$/;"	m	class:youren::Logger	access:private
youren::Logger::setLogLevel	log.h	/^    void setLogLevel(LogLevel::Level val) { m_level = val; }$/;"	f	class:youren::Logger	access:public	signature:(LogLevel::Level val)
youren::Logger::warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:youren::Logger	access:public	signature:(LogEvent::ptr event)
youren::Logger::~Logger	log.h	/^    ~Logger() {}$/;"	f	class:youren::Logger	access:public	signature:()
youren::StdoutAppender	log.h	/^class StdoutAppender : public LogAppender{$/;"	c	namespace:youren	inherits:LogAppender
youren::StdoutAppender::override	log.h	/^    void log(LogLevel::Level, LogEvent::ptr event) override;$/;"	m	class:youren::StdoutAppender	access:public
youren::StdoutAppender::ptr	log.h	/^    typedef std::shared_ptr<StdoutAppender> ptr;$/;"	t	class:youren::StdoutAppender	access:public
~FormatItem	log.h	/^        virtual ~FormatItem(){  }$/;"	f	class:youren::LogFormatter::FormatItem	access:public	signature:()
~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:youren::LogAppender	access:private	signature:()
~LogEvent	log.h	/^    ~LogEvent() {}$/;"	f	class:youren::LogEvent	access:public	signature:()
~LogFormatter	log.h	/^    ~LogFormatter() {}$/;"	f	class:youren::LogFormatter	access:public	signature:()
~Logger	log.h	/^    ~Logger() {}$/;"	f	class:youren::Logger	access:public	signature:()
